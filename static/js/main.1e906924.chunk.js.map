{"version":3,"sources":["components/Menu/index.tsx","serviceApi/models/models.ts","GameLocalStorageHelper.ts","components/CreateGame/index.tsx","serviceApi/serviceApi.ts","components/JoinGame/index.tsx","components/CheckerComponent/index.tsx","components/CellComponent.tsx","components/BoardComponent.tsx","components/Game/index.tsx","App.tsx","index.tsx"],"names":["Menu","BoardHorizontalCoordinates","BoardVerticalCoordinates","BoardSide","GamePlayer","CheckerRole","GameState","style","display","to","GameLocalStorageHelper","localStorage","getPlayerCodeKey","gameId","getRoleKey","savePlayerCode","playerCode","key","setItem","savePlayerRole","role","savePlayerCodeAndRole","getPlayerCodeAndRole","getPlayerCode","getPlayerRole","this","getItem","CreateGame","props","useState","checkerCellColor","setCheckerCellColor","nonPlayableCellColor","setNonPlayableCellColor","myCheckerColor","setMyCheckerColor","opponentCheckerColor","setOpponentCheckerColor","FirstSide","myBoardSide","setMyBoardSide","createButtonDisabled","setCreateButtonDisabled","api","skipJoinGameLink","navigate","useNavigate","radioClicked","e","inputValue","currentTarget","value","createGameClicked","a","dto","createGameEndpoint","id","firstPlayerCode","FirstPlayer","type","onChange","name","checked","SecondSide","disabled","onClick","ServiceApi","GameCreate","path","fetchApi","GameStart","previousBoardStateId","move","Move","method","body","headers","awaitableStatusCodes","fetch","host","JSON","stringify","response","includes","status","text","Error","json","result","JoinGame","gameInfo","setGameInfo","registerButtonDisabled","setRegistrationButtonDisabled","readyToPlayButtonDisabled","setReadyToPlayButtonDisabled","useParams","storage","undefined","alert","useEffect","getGameInfo","GetInfo","newGameInfo","catch","console","log","registerClick","RegisterSecondPlayer","success","message","code","SecondPlayer","readyToPlay","ReadyToPlay","state","Created","AllPlayersRegistred","CheckerComponent","cell","checkerClick","isKing","checker","King","className","background","color","borderWidth","CellComponent","selected","click","borderStyle","borderBottom","borderTop","BoardComponent","board","awaitableMove","makeMove","selectedCell","setSelectedCell","possibleMoves","coordinate","horizontal","vertical","map","pm","moveVector","filter","length","from","rows","Array","row","cells","c","push","H","reverse","i","index","Fragment","Game","gameState","Running","boardState","getData","SecondPlayerReadyToPlay","startGameEndpoint","startGameResult","Finished","delay","error","vector","moveEndpoint","moveResult","newBoardState","joinGameLink","document","location","origin","pathname","navigator","clipboard","writeText","winner","createGameWithBotApi","GameCreateWithBot","createGameWithHumanApi","GameCreateWithHuman","playGameWithBotApi","GameStartWithBot","MoveWithBot","playGameWithHumanApi","GameStartWithHuman","MoveWithHuman","App","element","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1e906924.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\r\n\r\nfunction Menu() {\r\n    return (\r\n        <div style={{display:'block'}}>\r\n          <div>\r\n            <NavLink to=\"/createGameWithBot\">Играть с ботом</NavLink>\r\n          </div>\r\n          <div>\r\n            <NavLink to=\"/createGame\">Играть с человеком</NavLink>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default Menu;","class GameCreateDTO{\r\n    myCheckerColor!: string;\r\n    opponentCheckerColor!: string;\r\n    checkerCellColor!: string;\r\n    nonPlayableCellColor!: string;\r\n    myBoardSide!: string\r\n}\r\n\r\nclass GameCreateResult{\r\n    id!: string;\r\n    firstPlayerCode!: string;\r\n}\r\n\r\ntype GameRegisterSecondPlayerResult = {\r\n    success: boolean\r\n    message: string;\r\n    code: string | null;\r\n}\r\n\r\ntype SetReadyToPlayResult = {\r\n    success: boolean\r\n    message: string\r\n}\r\n\r\nclass GameStartResult{\r\n    success!: boolean\r\n    message!: string\r\n    awaitableMove?: GamePlayer\r\n    boardState?: BoardState\r\n}\r\n\r\nclass BoardState{\r\n    id!: string\r\n    gameId!: string\r\n    board!: Board\r\n    createDateTime!: Date\r\n    previousBoardStateId!: string\r\n}\r\n\r\nclass Board{\r\n    checkerCellColor!: string\r\n    nonPlayableCellColor!: string\r\n    cells!: Array<Cell>\r\n}\r\n\r\nclass Cell{\r\n    color!: string\r\n    checker!: Checker\r\n    coordinate!: CellCoordinate\r\n}\r\n\r\nclass Checker{\r\n    color!: string\r\n    boardSide!: BoardSide\r\n    role!: CheckerRole\r\n    possibleMoves?: Array<Move>\r\n}\r\n\r\n\r\nclass Move{\r\n    moveVector!: MoveVector\r\n    capturableCheckerCoordinate?: CellCoordinate\r\n}\r\n\r\nclass GameGetInfoResult{\r\n    success!: boolean\r\n    message!: string\r\n    state!: GameState\r\n    boardState!: BoardState\r\n    awaitableMove!: GamePlayer|null \r\n    winner?: GamePlayer \r\n}\r\n\r\nclass MoveResult{\r\n    success!: boolean;\r\n    message!: string;\r\n    newBoardState!: BoardState;\r\n    awaitableMove!: GamePlayer|null\r\n}\r\n\r\nclass MoveVector{\r\n    from!: CellCoordinate;\r\n    to!: CellCoordinate;\r\n}\r\n\r\nclass CellCoordinate{\r\n    horizontal!: BoardHorizontalCoordinates;\r\n    vertical!: BoardVerticalCoordinates;\r\n}\r\n\r\nenum BoardHorizontalCoordinates{ A = \"A\", B = \"B\", C = \"C\", D = \"D\", E = \"E\", F = \"F\", G = \"G\", H = \"H\" }\r\n\r\nenum BoardVerticalCoordinates { One = \"One\", Two = \"Two\", Three = \"Two\", Four = \"Four\", Five = \"Five\", Six = \"Six\", Seven = \"Seven\", Eight = \"Eight\" }\r\n\r\nenum BoardSide { FirstSide = \"FirstSide\", SecondSide = \"SecondSide\"}\r\n\r\nenum GamePlayer { FirstPlayer = \"FirstPlayer\", SecondPlayer = \"SecondPlayer\" }\r\n\r\nenum CheckerRole { Men = \"Men\", King = \"King\" }\r\n\r\nenum GameState { \r\n    Created = \"Created\",\r\n    AllPlayersRegistred = \"AllPlayersRegistred\",\r\n    SecondPlayerReadyToPlay = \"SecondPlayerReadyToPlay\",\r\n    Running = \"Running\",\r\n    Finished = \"Finished\"\r\n}\r\n\r\nexport {\r\n    BoardSide,\r\n    GamePlayer,\r\n    GameState,\r\n    GameCreateDTO,\r\n    GameCreateResult,\r\n    GameGetInfoResult,\r\n    MoveVector,\r\n    MoveResult,\r\n    GameStartResult,\r\n    Board,\r\n    BoardVerticalCoordinates,\r\n    Cell,\r\n    BoardHorizontalCoordinates,\r\n    Checker,\r\n    CheckerRole\r\n};\r\nexport type { GameRegisterSecondPlayerResult, SetReadyToPlayResult };\r\n","import { GamePlayer } from \"./serviceApi/models/models\";\r\n\r\nexport class GameLocalStorageHelper {\r\n    constructor(localStorage: Storage){\r\n        this.localStorage = localStorage;\r\n    }\r\n    private localStorage!: Storage\r\n    private getPlayerCodeKey = (gameId: string) => \"gameId\" + gameId\r\n    private getRoleKey = (gameId: string) => \"role\" + gameId\r\n\r\n    savePlayerCode = (playerCode: string, gameId: string) => {\r\n        const key = this.getPlayerCodeKey(gameId);\r\n        this.localStorage.setItem(key, playerCode)\r\n    }\r\n    savePlayerRole = (role: GamePlayer, gameId: string) => {\r\n        const key = this.getRoleKey(gameId);\r\n        this.localStorage.setItem(key, role);\r\n    }\r\n    savePlayerCodeAndRole = (playerCode: string, role: GamePlayer, gameId: string) => {\r\n        this.savePlayerCode(playerCode, gameId)\r\n        this.savePlayerRole(role, gameId)\r\n    }\r\n\r\n    getPlayerCode(gameId: string){\r\n        const key = this.getPlayerCodeKey(gameId);\r\n        return this.localStorage.getItem(key);\r\n    }\r\n    getPlayerRole(gameId: string){\r\n        const key = this.getRoleKey(gameId);\r\n        return this.localStorage.getItem(key) as GamePlayer;\r\n    }\r\n    getPlayerCodeAndRole = (gameId: string) => ({\r\n        playerCode: this.getPlayerCode(gameId),\r\n        role: this.getPlayerRole(gameId)\r\n    })\r\n}","import { ChangeEvent, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { GameLocalStorageHelper } from \"../../GameLocalStorageHelper\";\r\nimport { GameCreateDTO, GameCreateResult, BoardSide, GamePlayer} from \"../../serviceApi/models/models\";\r\n\r\nfunction CreateGame(props: { \r\n                            api:  {\r\n                                    createGameEndpoint:  (dto: GameCreateDTO) => Promise<GameCreateResult>\r\n                                  },\r\n                            skipJoinGameLink: boolean\r\n                          }) {\r\n    const [checkerCellColor, setCheckerCellColor] = useState(\"#FFFF99\");\r\n    const [nonPlayableCellColor, setNonPlayableCellColor] = useState(\"#000000\");\r\n    const [myCheckerColor, setMyCheckerColor] = useState(\"#000000\");\r\n    const [opponentCheckerColor, setOpponentCheckerColor] = useState(\"#FFFFFF\");\r\n    const [myBoardSide, setMyBoardSide] = useState(BoardSide.FirstSide);\r\n    const [createButtonDisabled, setCreateButtonDisabled] = useState(false);\r\n\r\n    const {api, skipJoinGameLink} = props;\r\n    const navigate = useNavigate();\r\n\r\n    const radioClicked = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value as BoardSide;\r\n      setMyBoardSide(inputValue);\r\n    }\r\n\r\n    const checkerCellColorChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value;\r\n      setCheckerCellColor(inputValue);\r\n    }\r\n\r\n    const nonPlayableCellColorChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value;\r\n      setNonPlayableCellColor(inputValue);\r\n    }\r\n\r\n    const myCheckerColorChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value;\r\n      setMyCheckerColor(inputValue);\r\n    }\r\n\r\n    const opponentCheckerColorChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value;\r\n      setOpponentCheckerColor(inputValue);\r\n    }\r\n\r\n    const createGameClicked = async () => {\r\n\r\n      setCreateButtonDisabled(true);\r\n\r\n      const dto: GameCreateDTO = {\r\n        myCheckerColor: myCheckerColor,\r\n        opponentCheckerColor: opponentCheckerColor,\r\n        checkerCellColor: checkerCellColor,\r\n        nonPlayableCellColor: nonPlayableCellColor,\r\n        myBoardSide: myBoardSide\r\n      }\r\n\r\n      const {id, firstPlayerCode } = await api.createGameEndpoint(dto);\r\n\r\n      const storage = new GameLocalStorageHelper(localStorage)\r\n      storage.savePlayerCodeAndRole(firstPlayerCode, GamePlayer.FirstPlayer, id)\r\n\r\n      navigate(`/game/${id}/${skipJoinGameLink ? \"skipJoinGameLink\" : \"\"}`);\r\n    }\r\n\r\n    return (\r\n          <div>\r\n            <h1>CreateGame</h1>\r\n            <br/>\r\n            <div>\r\n              CheckerCellColor:\r\n              <br/>\r\n              <input type=\"color\" value={checkerCellColor} onChange={checkerCellColorChanged}/>\r\n            </div>\r\n            <div>\r\n              NonPlayableCellColor:\r\n              <br/>\r\n              <input type=\"color\" value={nonPlayableCellColor} onChange={nonPlayableCellColorChanged}/>\r\n            </div>\r\n            <div>\r\n              MyCheckerColor:\r\n              <br/>\r\n              <input type=\"color\" value={myCheckerColor} onChange={myCheckerColorChanged}/>\r\n            </div>\r\n            <div> \r\n              OpponentCheckerColor:\r\n              <br/>\r\n              <input type=\"color\" value={opponentCheckerColor} onChange={opponentCheckerColorChanged}/> \r\n            </div>\r\n            <div> \r\n              MyBoardSide:\r\n              <br/>\r\n              <input name=\"MyBoardSide\" \r\n                      type=\"radio\" \r\n                      value={BoardSide.FirstSide}\r\n                      checked={myBoardSide == BoardSide.FirstSide}\r\n                      onChange={radioClicked}/> \r\n                      FirstSide\r\n              <br/>\r\n              <input name=\"MyBoardSide\" \r\n                      type=\"radio\" \r\n                      value={BoardSide.SecondSide} \r\n                      checked={myBoardSide == BoardSide.SecondSide}\r\n                      onChange={radioClicked}/> \r\n                      SecondSide\r\n            </div> \r\n            <button disabled={createButtonDisabled} \r\n                    onClick={createGameClicked}>\r\n                      CreateGame\r\n            </button>\r\n          </div>\r\n    );\r\n  }\r\n\r\n  export default CreateGame;","import { GameCreateDTO, GameCreateResult, GameStartResult, MoveVector, MoveResult, GameGetInfoResult, GameRegisterSecondPlayerResult, SetReadyToPlayResult } from \"./models/models\";\r\n\r\nclass ServiceApi{\r\n    static host = \"https://checker-game-api.egorluckydevdomain.ru\";\r\n\r\n    static async GameCreateWithHuman(dto: GameCreateDTO){\r\n        return ServiceApi.GameCreate(dto, \"/game/create\")\r\n    }\r\n\r\n    static async GameCreateWithBot(dto: GameCreateDTO){\r\n        return ServiceApi.GameCreate(dto, \"/game/createWithBot\")\r\n    }\r\n\r\n    static async GameCreate(dto: GameCreateDTO, path: string){\r\n        return ServiceApi.fetchApi<GameCreateResult>(\r\n            path, \r\n            \"POST\", \r\n            dto, \r\n            {\r\n                \"content-type\": \"application/json\"\r\n            },\r\n            [200])\r\n    }\r\n\r\n    static async RegisterSecondPlayer(gameId: string) {\r\n        return ServiceApi.fetchApi<GameRegisterSecondPlayerResult>(\r\n            \"/game/registerSecondPlayer\",\r\n            \"POST\",\r\n            gameId,\r\n            {\r\n                \"content-type\": \"application/json\"\r\n            },\r\n            [200, 400])\r\n    }\r\n\r\n    static async ReadyToPlay(playerCode: string) {\r\n        return ServiceApi.fetchApi<SetReadyToPlayResult>(\r\n            \"/game/readyToPlay\",\r\n            \"POST\",\r\n            null,\r\n            {\r\n                \"content-type\": \"application/json\",\r\n                playerCode: playerCode\r\n            },\r\n            [200, 400])\r\n    }\r\n\r\n    static GameStartWithHuman(firstPlayerCode: string){\r\n        return ServiceApi.GameStart(firstPlayerCode, \"/game/start\")\r\n    }\r\n\r\n    static GameStartWithBot(firstPlayerCode: string){\r\n        return ServiceApi.GameStart(firstPlayerCode, \"/game/startWithBot\")\r\n    }\r\n\r\n    static async GameStart(firstPlayerCode: string, path: string){\r\n        return ServiceApi.fetchApi<GameStartResult>(\r\n            path, \r\n            \"POST\", \r\n            firstPlayerCode, \r\n            {\r\n                \"content-type\": \"application/json\"\r\n            },\r\n            [200, 400])\r\n    }\r\n\r\n\r\n    static async MoveWithHuman(playerCode: string, previousBoardStateId: string, move: MoveVector){\r\n        return ServiceApi.Move(playerCode, previousBoardStateId, move, \"/game/move\");\r\n    }\r\n\r\n    static async MoveWithBot(playerCode: string, previousBoardStateId: string, move: MoveVector){\r\n        return ServiceApi.Move(playerCode, previousBoardStateId, move, \"/game/moveWithBot\");\r\n    }\r\n\r\n    static async Move(playerCode: string, previousBoardStateId: string, move: MoveVector, path: string){\r\n        return ServiceApi.fetchApi<MoveResult>(\r\n            path, \r\n            \"POST\", \r\n            move, \r\n            {\r\n                \"content-type\": \"application/json\",\r\n                playerCode: playerCode,\r\n                previousBoardStateId: previousBoardStateId\r\n            },\r\n            [200])\r\n    }\r\n\r\n    static async GetInfo(gameId: string){\r\n        return ServiceApi.fetchApi<GameGetInfoResult>(\r\n            \"/game/getInfo?gameId=\" + gameId, \r\n            \"GET\", \r\n            null, \r\n            {},\r\n            [200, 400])\r\n    }\r\n\r\n    static async fetchApi<T>(path: string, method: string, body: any, headers: Record<string, string>, awaitableStatusCodes: number[]){\r\n        const response = await fetch(this.host + path, {\r\n            body: body && JSON.stringify(body),\r\n            headers: headers,\r\n            method: method\r\n        });\r\n\r\n        if(!awaitableStatusCodes.includes(response.status)){\r\n            const text = await response.text();\r\n            throw new Error(text);\r\n        }\r\n\r\n        const json = await response.json();\r\n        const result = json as T;\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default ServiceApi; ","import { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { GameLocalStorageHelper } from \"../../GameLocalStorageHelper\";\r\nimport { GameGetInfoResult, GamePlayer, GameState } from \"../../serviceApi/models/models\";\r\nimport ServiceApi from \"../../serviceApi/serviceApi\";\r\n\r\nfunction JoinGame() {\r\n    const [gameInfo, setGameInfo] = useState<GameGetInfoResult|null>(null);\r\n    const [registerButtonDisabled, setRegistrationButtonDisabled] = useState<boolean>(false);\r\n    const [readyToPlayButtonDisabled, setReadyToPlayButtonDisabled] = useState<boolean>(false);\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const storage = new GameLocalStorageHelper(localStorage)\r\n\r\n    if(id === undefined){\r\n      alert(\"wrong url\");\r\n      throw new Error();\r\n    }\r\n\r\n    useEffect(() => {\r\n      const getGameInfo = async () => {\r\n        if(gameInfo == null){\r\n          const newGameInfo = await ServiceApi.GetInfo(id);\r\n          setGameInfo(newGameInfo);\r\n        }\r\n      }\r\n\r\n      getGameInfo().catch(console.log);\r\n    })\r\n\r\n    const registerClick = async () => {\r\n      setRegistrationButtonDisabled(true);\r\n      const {success, message, code} = await ServiceApi.RegisterSecondPlayer(id);\r\n      setRegistrationButtonDisabled(false);\r\n      setGameInfo(null);\r\n      if(success){\r\n        if(code == null)\r\n         throw new Error(\"code is null but success is true after game registration\");\r\n        storage.savePlayerCodeAndRole(code, GamePlayer.SecondPlayer, id)\r\n      } \r\n      else{\r\n        throw new Error(message);\r\n      }\r\n    }\r\n\r\n    const readyToPlay = async () => {\r\n      setReadyToPlayButtonDisabled(true);\r\n      const code = storage.getPlayerCode(id);\r\n\r\n      if(code == null)\r\n        throw new Error(\"readyToPlay: player code is null\")\r\n\r\n      const {success, message} = await ServiceApi.ReadyToPlay(code);\r\n      setRegistrationButtonDisabled(false);\r\n      setGameInfo(null);\r\n      if(success){\r\n        navigate(`/game/${id}`);\r\n      } \r\n      else{\r\n        throw new Error(message);\r\n      }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n          { gameInfo == null && <>Getting info about game...</> }\r\n          { \r\n            gameInfo?.state === GameState.Created && \r\n            <>\r\n              <button onClick={registerClick}\r\n                      disabled={registerButtonDisabled}>\r\n                Register in game\r\n              </button>\r\n            </> \r\n          }\r\n          { \r\n            gameInfo?.state === GameState.AllPlayersRegistred &&\r\n            <>\r\n              <button onClick={readyToPlay}\r\n                      disabled={readyToPlayButtonDisabled}>\r\n                I'm ready to play\r\n              </button>\r\n            </>\r\n          }\r\n          {\r\n            gameInfo && \r\n            gameInfo.state != GameState.Created &&\r\n            gameInfo.state != GameState.AllPlayersRegistred &&\r\n            <>Joining complete</> \r\n          }\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default JoinGame;","import \"./checker.css\";\r\nimport { Cell, Checker, CheckerRole } from \"../../serviceApi/models/models\"\r\n\r\nfunction CheckerComponent(props: { cell: Cell, checkerClick: (cell: Cell) => void }){\r\n    const { cell, checkerClick } = props;\r\n    const click = () => checkerClick(cell)\r\n    const isKing = cell.checker?.role === CheckerRole.King\r\n    return <div className=\"checker\" \r\n                style={{background: cell.checker.color, borderWidth: isKing ? \"5px\": \"1px\" }}\r\n                onClick={click}>\r\n            </div>\r\n}\r\n\r\nexport default CheckerComponent;","import React, {FC} from 'react';\r\nimport {Cell, Checker} from \"../serviceApi/models/models\"\r\nimport CheckerComponent from './CheckerComponent';\r\n\r\ninterface CellProps {\r\n  cell: Cell;\r\n  selected: boolean;\r\n  click: (cell: Cell) => void;\r\n  checkerClick: (cell: Cell) => void;\r\n}\r\n\r\nconst CellComponent: FC<CellProps> = ({cell, selected, click, checkerClick}) => {\r\n  const borderStyle = selected ? \"dotted\": \"\";\r\n  return (\r\n    <div\r\n      className='cell'\r\n      onClick={() => click(cell)}\r\n      style={{background: cell.color, borderBottom: borderStyle, borderTop: borderStyle}}\r\n    >\r\n      {//cell.checker == null && <div className={\"available\"}/>\r\n      }\r\n      {cell.checker && <CheckerComponent cell={cell} checkerClick={checkerClick}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CellComponent;\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport { Board, BoardHorizontalCoordinates, BoardSide, BoardVerticalCoordinates, Cell, Checker, GamePlayer, MoveVector } from \"../serviceApi/models/models\";\r\nimport CellComponent from \"./CellComponent\";\r\n\r\ninterface BoardProps {\r\n  board: Board;\r\n  awaitableMove: GamePlayer | null;\r\n  role: GamePlayer;\r\n  //boardSide: BoardSide\r\n  makeMove: (vector: MoveVector) => Promise<any>\r\n}\r\n\r\nconst BoardComponent: FC<BoardProps> = ({board, awaitableMove, role, makeMove}) => {\r\n  const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\r\n\r\n  const click = async (cell: Cell) => {\r\n    if(awaitableMove != role)\r\n      return;\r\n    if (selectedCell){\r\n      if(selectedCell != cell) {\r\n        if(selectedCell.checker.possibleMoves){\r\n          const {horizontal, vertical} = cell.coordinate;\r\n          const to = selectedCell.checker.possibleMoves.map(pm => pm.moveVector.to).filter(to => to.horizontal == horizontal && to.vertical == vertical);\r\n          if(to.length > 0){\r\n            await makeMove({from: selectedCell.coordinate, to: cell.coordinate})\r\n            setSelectedCell(null)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const checkerClick = (cell: Cell) => {\r\n    if(awaitableMove != role)\r\n      return;\r\n    if(cell.checker && cell.checker.possibleMoves && cell.checker.possibleMoves.length > 0){\r\n      setSelectedCell(cell);\r\n    }\r\n  }\r\n\r\n  const rows = Array<Array<Cell>>();\r\n  let row = Array<Cell>();\r\n\r\n  board.cells.map(c => {\r\n    row.push(c);\r\n    if(c.coordinate.horizontal == BoardHorizontalCoordinates.H){\r\n      rows.push(row);\r\n      row = Array<Cell>();\r\n    }\r\n  });\r\n  rows.reverse();\r\n\r\n  let i = 0;\r\n  return (\r\n    <div>\r\n      {awaitableMove && <h3>Waiting for move from {awaitableMove == role ? \"YOU\" : \"opponent\"}</h3>}\r\n      <div className=\"board\">\r\n        { rows.map((row, index) =>\r\n          <React.Fragment key={index}>\r\n            {row.map(cell =>\r\n              <CellComponent\r\n                click={click}\r\n                checkerClick={checkerClick}\r\n                cell={cell}\r\n                key={i++}\r\n                selected={cell.coordinate === selectedCell?.coordinate}\r\n              />\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardComponent;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ServiceApi from \"../../serviceApi/serviceApi\";\r\nimport { GameGetInfoResult, GamePlayer, GameStartResult, GameState, MoveResult, MoveVector, Board } from \"../../serviceApi/models/models\";\r\nimport BoardComponent from \"../BoardComponent\";\r\nimport delay from \"delay\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GameLocalStorageHelper } from \"../../GameLocalStorageHelper\";\r\n\r\nfunction Game(props: { \r\n                        skipJoinGameLink: boolean, \r\n                        api: {\r\n                                startGameEndpoint: (firstPlayerCode: string) => Promise<GameStartResult>\r\n                                moveEndpoint: (playerCode: string, previousBoardStateId: string, move: MoveVector) => Promise<MoveResult>\r\n                             }\r\n                      }) {\r\n    const { skipJoinGameLink, api } = props;\r\n    const { id } = useParams();\r\n    const [ gameInfo, setGameInfo ] = useState<GameGetInfoResult | null>(null);\r\n    const gameState = gameInfo?.state;\r\n    const storage = new GameLocalStorageHelper(localStorage)\r\n\r\n    const {playerCode, role} = storage.getPlayerCodeAndRole(id as string);\r\n\r\n    if(playerCode === null)\r\n      throw new Error(\"player code not found\");\r\n\r\n    if(gameState == GameState.Running && gameInfo?.boardState.board === undefined)\r\n      throw new Error(\"board is null\");\r\n\r\n    useEffect(() => {\r\n      if(id === undefined)\r\n        return;\r\n      const getData = async () => {\r\n        if(gameState == GameState.SecondPlayerReadyToPlay && role == GamePlayer.FirstPlayer){\r\n          const startGameResult = await api.startGameEndpoint(playerCode)\r\n\r\n          if(!startGameResult.success)\r\n            throw new Error(startGameResult.message);\r\n\r\n          if(startGameResult.awaitableMove == null)\r\n            throw new Error(\"awaitable move unknown\");\r\n          \r\n          if(startGameResult.boardState == null)\r\n            throw new Error(\"boardState is null\");\r\n          \r\n          setGameInfo({\r\n            success: startGameResult.success,\r\n            message: startGameResult.message,\r\n            awaitableMove: startGameResult.awaitableMove,\r\n            boardState: startGameResult.boardState,\r\n            state: GameState.Running\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        if(gameInfo?.awaitableMove === role){\r\n          return;\r\n        }\r\n\r\n        if(gameState === GameState.Finished)\r\n          return;\r\n\r\n        const newGameInfo = await ServiceApi.GetInfo(id);\r\n        setGameInfo(newGameInfo);\r\n\r\n        await delay(300)\r\n      }\r\n\r\n      getData().catch(console.error);\r\n    });\r\n\r\n    const move = async (vector: MoveVector) => {\r\n      try{\r\n        const moveResult = await api.moveEndpoint(playerCode, gameInfo?.boardState.id as string, vector);\r\n        if(!moveResult.success){\r\n          throw new Error(\"move result is not success\");\r\n        }\r\n\r\n        setGameInfo({\r\n          success: moveResult.success,\r\n          message: moveResult.message,\r\n          awaitableMove: moveResult.awaitableMove,\r\n          boardState: moveResult.newBoardState,\r\n          state: GameState.Running\r\n        })\r\n      }\r\n      catch(error){\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    const joinGameLink = document.location.origin + document.location.pathname + \"#/joinGame/\" + id;\r\n    const copyJoinGameLinkToClipBoard = () => {\r\n      navigator.clipboard.writeText(joinGameLink)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n          { \r\n            gameState === undefined && <>Getting info about game</> \r\n            || gameState === GameState.Created && role === GamePlayer.FirstPlayer && skipJoinGameLink && <>Wait for opponent registration</> \r\n            || gameState === GameState.Created && role === GamePlayer.FirstPlayer && !skipJoinGameLink && \r\n              <>Send this link to your opponent: \r\n                <br/>\r\n                { joinGameLink }\r\n                <br/>\r\n                <button onClick={copyJoinGameLinkToClipBoard}>Copy</button> \r\n                <br/>and wait for his/her registration</>\r\n            || gameState === GameState.Created && role === GamePlayer.SecondPlayer && <button>Register in game</button>\r\n            || gameState === GameState.AllPlayersRegistred && role === GamePlayer.FirstPlayer && <>Opponent has registred, waiting for opponent will be ready to play</> \r\n            || gameState === GameState.AllPlayersRegistred && role === GamePlayer.SecondPlayer && <button>I'm ready to play</button>\r\n            || gameState === GameState.SecondPlayerReadyToPlay && role === GamePlayer.FirstPlayer && <>Opponent is ready to play. Starting the game...</>\r\n            || gameState === GameState.SecondPlayerReadyToPlay && role === GamePlayer.SecondPlayer && <>Waiting for start of the game by game creator</>\r\n            || (gameState === GameState.Running|| gameState === GameState.Finished) && \r\n                <>\r\n                  {gameState === GameState.Finished && <>Game over. {gameInfo?.winner == role? \"You won\": \"You lose\"} <br/><Link to=\"/\">Menu</Link></>}\r\n                  <BoardComponent \r\n                    board={gameInfo?.boardState?.board as Board} \r\n                    awaitableMove={gameInfo == null? null: gameInfo.awaitableMove}\r\n                    role={role}\r\n                    //boardSide={gameInfo.} \r\n                    makeMove={move}/>\r\n                </>\r\n          }\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default Game;","import \"./App.css\";\r\n\r\nimport {\r\n  HashRouter as Router,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nimport Menu from './components/Menu';\r\nimport CreateGame from \"./components/CreateGame\";\r\nimport JoinGame from \"./components/JoinGame\";\r\nimport Game from \"./components/Game\";\r\nimport ServiceApi from \"./serviceApi/serviceApi\";\r\n\r\nconst createGameWithBotApi = {\r\n  createGameEndpoint: ServiceApi.GameCreateWithBot\r\n};\r\n\r\nconst createGameWithHumanApi = {\r\n  createGameEndpoint: ServiceApi.GameCreateWithHuman\r\n};\r\n\r\nconst playGameWithBotApi = {\r\n  startGameEndpoint: ServiceApi.GameStartWithBot,\r\n  moveEndpoint: ServiceApi.MoveWithBot\r\n};\r\n\r\nconst playGameWithHumanApi = {\r\n  startGameEndpoint: ServiceApi.GameStartWithHuman,\r\n  moveEndpoint: ServiceApi.MoveWithHuman\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n          <div className=\"app\">\r\n            <Router>\r\n              <Routes>\r\n                  <Route path=\"/\" element={<Menu/>} />\r\n                  <Route path=\"/createGameWithBot\" element={<CreateGame api={createGameWithBotApi} skipJoinGameLink={true}/>} />\r\n                  <Route path=\"/createGame\" element={<CreateGame api={createGameWithHumanApi} skipJoinGameLink={false}/>} />\r\n                  <Route path=\"/joinGame/:id\" element={<JoinGame/>} />\r\n                  <Route path=\"/game/:id\" element={<Game skipJoinGameLink={false} api={playGameWithHumanApi}/>}/>\r\n                  <Route path=\"/game/:id/skipJoinGameLink\" element={<Game skipJoinGameLink={true} api={playGameWithBotApi}/>}/>\r\n              </Routes>\r\n            </Router>\r\n          </div>\r\n        );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}