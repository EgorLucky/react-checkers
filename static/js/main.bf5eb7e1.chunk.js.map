{"version":3,"sources":["components/Menu/index.tsx","serviceApi/models/models.ts","components/CreateGame/index.tsx","components/JoinGame/index.tsx","serviceApi/serviceApi.ts","components/CheckerComponent/index.tsx","components/CellComponent.tsx","components/BoardComponent.tsx","components/Game/index.tsx","App.tsx","index.tsx"],"names":["Menu","BoardHorizontalCoordinates","BoardVerticalCoordinates","BoardSide","GamePlayer","CheckerRole","GameState","style","display","to","CreateGame","props","useState","checkerCellColor","setCheckerCellColor","nonPlayableCellColor","setNonPlayableCellColor","myCheckerColor","setMyCheckerColor","opponentCheckerColor","setOpponentCheckerColor","FirstSide","myBoardSide","setMyBoardSide","createButtonDisabled","setCreateButtonDisabled","api","skipJoinGameLink","navigate","useNavigate","radioClicked","e","inputValue","currentTarget","value","createGameClicked","a","dto","createGameEndpoint","id","firstPlayerCode","localStorage","setItem","FirstPlayer","type","onChange","name","checked","SecondSide","disabled","onClick","JoinGame","ServiceApi","GameCreate","path","fetchApi","GameStart","playerCode","previousBoardStateId","move","Move","gameId","method","body","headers","awaitableStatusCodes","fetch","this","host","JSON","stringify","response","includes","status","text","Error","json","result","CheckerComponent","cell","checkerClick","className","background","checker","color","CellComponent","selected","click","borderStyle","borderBottom","borderTop","BoardComponent","board","awaitableMove","role","makeMove","selectedCell","setSelectedCell","possibleMoves","coordinate","horizontal","vertical","map","pm","moveVector","filter","length","from","rows","Array","row","cells","c","push","H","reverse","i","index","Fragment","Game","useParams","gameInfo","setGameInfo","gameState","state","getItem","Running","undefined","boardState","useEffect","getData","SecondPlayerReadyToPlay","startGameEndpoint","startGameResult","success","message","Finished","GetInfo","newGameInfo","delay","catch","console","error","vector","moveEndpoint","moveResult","newBoardState","log","Created","document","location","origin","SecondPlayer","AllPlayersRegistred","winner","createGameWithBotApi","GameCreateWithBot","createGameWithHumanApi","GameCreateWithHuman","playGameWithBotApi","GameStartWithBot","MoveWithBot","playGameWithHumanApi","GameStartWithHuman","MoveWithHuman","App","element","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bf5eb7e1.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\r\n\r\nfunction Menu() {\r\n    return (\r\n        <div style={{display:'block'}}>\r\n          <div>\r\n            <NavLink to=\"/createGameWithBot\">Играть с ботом</NavLink>\r\n          </div>\r\n          <div>\r\n            <NavLink to=\"/createGame\">Играть с человеком</NavLink>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default Menu;","class GameCreateDTO{\r\n    myCheckerColor!: string;\r\n    opponentCheckerColor!: string;\r\n    checkerCellColor!: string;\r\n    nonPlayableCellColor!: string;\r\n    myBoardSide!: string\r\n}\r\n\r\nclass GameCreateResult{\r\n    id!: string;\r\n    firstPlayerCode!: string;\r\n}\r\n\r\nclass GameStartResult{\r\n    success!: boolean\r\n    message!: string\r\n    awaitableMove?: GamePlayer\r\n    boardState?: BoardState\r\n}\r\n\r\nclass BoardState{\r\n    id!: string\r\n    gameId!: string\r\n    board!: Board\r\n    createDateTime!: Date\r\n    previousBoardStateId!: string\r\n}\r\n\r\nclass Board{\r\n    checkerCellColor!: string\r\n    nonPlayableCellColor!: string\r\n    cells!: Array<Cell>\r\n}\r\n\r\nclass Cell{\r\n    color!: string\r\n    checker!: Checker\r\n    coordinate!: CellCoordinate\r\n}\r\n\r\nclass Checker{\r\n    color!: string\r\n    boardSide!: BoardSide\r\n    role!: CheckerRole\r\n    possibleMoves?: Array<Move>\r\n}\r\n\r\n\r\nclass Move{\r\n    moveVector!: MoveVector\r\n    capturableCheckerCoordinate?: CellCoordinate\r\n}\r\n\r\nclass GameGetInfoResult{\r\n    success!: boolean\r\n    message!: string\r\n    state!: GameState\r\n    boardState!: BoardState\r\n    awaitableMove!: GamePlayer|null \r\n    winner?: GamePlayer \r\n}\r\n\r\nclass MoveResult{\r\n    success!: boolean;\r\n    message!: string;\r\n    newBoardState!: BoardState;\r\n    awaitableMove!: GamePlayer|null\r\n}\r\n\r\nclass MoveVector{\r\n    from!: CellCoordinate;\r\n    to!: CellCoordinate;\r\n}\r\n\r\nclass CellCoordinate{\r\n    horizontal!: BoardHorizontalCoordinates;\r\n    vertical!: BoardVerticalCoordinates;\r\n}\r\n\r\nenum BoardHorizontalCoordinates{ A = \"A\", B = \"B\", C = \"C\", D = \"D\", E = \"E\", F = \"F\", G = \"G\", H = \"H\" }\r\n\r\nenum BoardVerticalCoordinates { One = \"One\", Two = \"Two\", Three = \"Two\", Four = \"Four\", Five = \"Five\", Six = \"Six\", Seven = \"Seven\", Eight = \"Eight\" }\r\n\r\nenum BoardSide { FirstSide = \"FirstSide\", SecondSide = \"SecondSide\"}\r\n\r\nenum GamePlayer { FirstPlayer = \"FirstPlayer\", SecondPlayer = \"SecondPlayer\" }\r\n\r\nenum CheckerRole { Men = \"Men\", King = \"King\" }\r\n\r\nenum GameState { \r\n    Created = \"Created\",\r\n    AllPlayersRegistred = \"AllPlayersRegistred\",\r\n    SecondPlayerReadyToPlay = \"SecondPlayerReadyToPlay\",\r\n    Running = \"Running\",\r\n    Finished = \"Finished\"\r\n}\r\n\r\nexport { \r\n    BoardSide, \r\n    GamePlayer, \r\n    GameState, \r\n    GameCreateDTO, \r\n    GameCreateResult, \r\n    GameGetInfoResult, \r\n    MoveVector, \r\n    MoveResult, \r\n    GameStartResult, \r\n    Board, \r\n    BoardVerticalCoordinates,\r\n    Cell,\r\n    BoardHorizontalCoordinates,\r\n    Checker\r\n }","import { ChangeEvent, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { GameCreateDTO, GameCreateResult, BoardSide, MoveVector, MoveResult, GamePlayer} from \"../../serviceApi/models/models\";\r\n\r\nfunction CreateGame(props: { \r\n                            api:  {\r\n                                    createGameEndpoint:  (dto: GameCreateDTO) => Promise<GameCreateResult>\r\n                                  },\r\n                            skipJoinGameLink: boolean\r\n                          }) {\r\n    const [checkerCellColor, setCheckerCellColor] = useState(\"#FFFF99\");\r\n    const [nonPlayableCellColor, setNonPlayableCellColor] = useState(\"#000000\");\r\n    const [myCheckerColor, setMyCheckerColor] = useState(\"#000000\");\r\n    const [opponentCheckerColor, setOpponentCheckerColor] = useState(\"#FFFFFF\");\r\n    const [myBoardSide, setMyBoardSide] = useState(BoardSide.FirstSide);\r\n    const [createButtonDisabled, setCreateButtonDisabled] = useState(false);\r\n\r\n    const {api, skipJoinGameLink} = props;\r\n    const navigate = useNavigate();\r\n\r\n    const radioClicked = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value as BoardSide;\r\n      setMyBoardSide(inputValue);\r\n    }\r\n\r\n    const checkerCellColorChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value;\r\n      setCheckerCellColor(inputValue);\r\n    }\r\n\r\n    const nonPlayableCellColorChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value;\r\n      setNonPlayableCellColor(inputValue);\r\n    }\r\n\r\n    const myCheckerColorChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value;\r\n      setMyCheckerColor(inputValue);\r\n    }\r\n\r\n    const opponentCheckerColorChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const inputValue = e.currentTarget.value;\r\n      setOpponentCheckerColor(inputValue);\r\n    }\r\n\r\n    const createGameClicked = async () => {\r\n\r\n      setCreateButtonDisabled(true);\r\n\r\n      const dto: GameCreateDTO = {\r\n        myCheckerColor: myCheckerColor,\r\n        opponentCheckerColor: opponentCheckerColor,\r\n        checkerCellColor: checkerCellColor,\r\n        nonPlayableCellColor: nonPlayableCellColor,\r\n        myBoardSide: myBoardSide\r\n      }\r\n\r\n      const {id, firstPlayerCode } = await api.createGameEndpoint(dto);\r\n\r\n      localStorage.setItem(\"gameId\" + id, firstPlayerCode);\r\n      localStorage.setItem(\"role\" + id, GamePlayer.FirstPlayer);\r\n\r\n      navigate(`/game/${id}/${skipJoinGameLink ? \"skipJoinGameLink\" : \"\"}`);\r\n    }\r\n\r\n    return (\r\n          <div>\r\n            <h1>CreateGame</h1>\r\n            <br/>\r\n            <div>\r\n              CheckerCellColor:\r\n              <br/>\r\n              <input type=\"color\" value={checkerCellColor} onChange={checkerCellColorChanged}/>\r\n            </div>\r\n            <div>\r\n              NonPlayableCellColor:\r\n              <br/>\r\n              <input type=\"color\" value={nonPlayableCellColor} onChange={nonPlayableCellColorChanged}/>\r\n            </div>\r\n            <div>\r\n              MyCheckerColor:\r\n              <br/>\r\n              <input type=\"color\" value={myCheckerColor} onChange={myCheckerColorChanged}/>\r\n            </div>\r\n            <div> \r\n              OpponentCheckerColor:\r\n              <br/>\r\n              <input type=\"color\" value={opponentCheckerColor} onChange={opponentCheckerColorChanged}/> \r\n            </div>\r\n            <div> \r\n              MyBoardSide:\r\n              <br/>\r\n              <input name=\"MyBoardSide\" \r\n                      type=\"radio\" \r\n                      value={BoardSide.FirstSide}\r\n                      checked={myBoardSide == BoardSide.FirstSide}\r\n                      onChange={radioClicked}/> \r\n                      FirstSide\r\n              <br/>\r\n              <input name=\"MyBoardSide\" \r\n                      type=\"radio\" \r\n                      value={BoardSide.SecondSide} \r\n                      checked={myBoardSide == BoardSide.SecondSide}\r\n                      onChange={radioClicked}/> \r\n                      SecondSide\r\n            </div> \r\n            <button disabled={createButtonDisabled} \r\n                    onClick={createGameClicked}>\r\n                      CreateGame\r\n            </button>\r\n          </div>\r\n    );\r\n  }\r\n\r\n  export default CreateGame;","function JoinGame() {\r\n    return (\r\n        <div>\r\n          JoinGame\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default JoinGame;","import { GameCreateDTO, GameCreateResult, GameStartResult, MoveVector, MoveResult, GameGetInfoResult } from \"./models/models\";\r\n\r\nclass ServiceApi{\r\n    static host = \"https://checker-game-api.egorluckydevdomain.ru\";\r\n\r\n    static async GameCreateWithHuman(dto: GameCreateDTO){\r\n        return ServiceApi.GameCreate(dto, \"/game/create\")\r\n    }\r\n\r\n    static async GameCreateWithBot(dto: GameCreateDTO){\r\n        return ServiceApi.GameCreate(dto, \"/game/createWithBot\")\r\n    }\r\n\r\n    static async GameCreate(dto: GameCreateDTO, path: string){\r\n        return ServiceApi.fetchApi<GameCreateResult>(\r\n            path, \r\n            \"POST\", \r\n            dto, \r\n            {\r\n                \"content-type\": \"application/json\"\r\n            },\r\n            [200])\r\n    }\r\n\r\n    static GameStartWithHuman(firstPlayerCode: string){\r\n        return ServiceApi.GameStart(firstPlayerCode, \"/game/start\")\r\n    }\r\n\r\n    static GameStartWithBot(firstPlayerCode: string){\r\n        return ServiceApi.GameStart(firstPlayerCode, \"/game/startWithBot\")\r\n    }\r\n\r\n    static async GameStart(firstPlayerCode: string, path: string){\r\n        return ServiceApi.fetchApi<GameStartResult>(\r\n            path, \r\n            \"POST\", \r\n            firstPlayerCode, \r\n            {\r\n                \"content-type\": \"application/json\"\r\n            },\r\n            [200, 400])\r\n    }\r\n\r\n\r\n    static async MoveWithHuman(playerCode: string, previousBoardStateId: string, move: MoveVector){\r\n        return ServiceApi.Move(playerCode, previousBoardStateId, move, \"/game/move\");\r\n    }\r\n\r\n    static async MoveWithBot(playerCode: string, previousBoardStateId: string, move: MoveVector){\r\n        return ServiceApi.Move(playerCode, previousBoardStateId, move, \"/game/moveWithBot\");\r\n    }\r\n\r\n    static async Move(playerCode: string, previousBoardStateId: string, move: MoveVector, path: string){\r\n        return ServiceApi.fetchApi<MoveResult>(\r\n            path, \r\n            \"POST\", \r\n            move, \r\n            {\r\n                \"content-type\": \"application/json\",\r\n                playerCode: playerCode,\r\n                previousBoardStateId: previousBoardStateId\r\n            },\r\n            [200])\r\n    }\r\n\r\n    static async GetInfo(gameId: string){\r\n        return ServiceApi.fetchApi<GameGetInfoResult>(\r\n            \"/game/getInfo?gameId=\" + gameId, \r\n            \"GET\", \r\n            null, \r\n            {},\r\n            [200, 400])\r\n    }\r\n\r\n    static async fetchApi<T>(path: string, method: string, body: any, headers: Record<string, string>, awaitableStatusCodes: number[]){\r\n        const response = await fetch(this.host + path, {\r\n            body: body && JSON.stringify(body),\r\n            headers: headers,\r\n            method: method\r\n        });\r\n\r\n        if(!awaitableStatusCodes.includes(response.status)){\r\n            const text = await response.text();\r\n            throw new Error(text);\r\n        }\r\n\r\n        const json = await response.json();\r\n        const result = json as T;\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default ServiceApi; ","import \"./checker.css\";\r\nimport { Cell, Checker } from \"../../serviceApi/models/models\"\r\n\r\nfunction CheckerComponent(props: { cell: Cell, checkerClick: (cell: Cell) => void }){\r\n    const { cell, checkerClick } = props;\r\n    const click = () => checkerClick(cell)\r\n    return <div className=\"checker\" \r\n                style={{background: cell.checker.color}}\r\n                onClick={click}>\r\n            </div>\r\n}\r\n\r\nexport default CheckerComponent;","import React, {FC} from 'react';\r\nimport {Cell, Checker} from \"../serviceApi/models/models\"\r\nimport CheckerComponent from './CheckerComponent';\r\n\r\ninterface CellProps {\r\n  cell: Cell;\r\n  selected: boolean;\r\n  click: (cell: Cell) => void;\r\n  checkerClick: (cell: Cell) => void;\r\n}\r\n\r\nconst CellComponent: FC<CellProps> = ({cell, selected, click, checkerClick}) => {\r\n  const borderStyle = selected ? \"dotted\": \"\";\r\n  return (\r\n    <div\r\n      className='cell'\r\n      onClick={() => click(cell)}\r\n      style={{background: cell.color, borderBottom: borderStyle, borderTop: borderStyle}}\r\n    >\r\n      {//cell.checker == null && <div className={\"available\"}/>\r\n      }\r\n      {cell.checker && <CheckerComponent cell={cell} checkerClick={checkerClick}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CellComponent;\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport { Board, BoardHorizontalCoordinates, BoardVerticalCoordinates, Cell, Checker, GamePlayer, MoveVector } from \"../serviceApi/models/models\";\r\nimport CellComponent from \"./CellComponent\";\r\n\r\ninterface BoardProps {\r\n  board: Board;\r\n  awaitableMove: GamePlayer;\r\n  role: GamePlayer;\r\n  makeMove: (vector: MoveVector) => Promise<any>\r\n}\r\n\r\nconst BoardComponent: FC<BoardProps> = ({board, awaitableMove, role, makeMove}) => {\r\n  const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\r\n\r\n  const click = async (cell: Cell) => {\r\n    if(awaitableMove != role)\r\n      return;\r\n    if (selectedCell){\r\n      if(selectedCell != cell) {\r\n        if(selectedCell.checker.possibleMoves){\r\n          const {horizontal, vertical} = cell.coordinate;\r\n          const to = selectedCell.checker.possibleMoves.map(pm => pm.moveVector.to).filter(to => to.horizontal == horizontal && to.vertical == vertical);\r\n          if(to.length > 0){\r\n            await makeMove({from: selectedCell.coordinate, to: cell.coordinate})\r\n            setSelectedCell(null)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const checkerClick = (cell: Cell) => {\r\n    if(awaitableMove != role)\r\n      return;\r\n    if(cell.checker && cell.checker.possibleMoves && cell.checker.possibleMoves.length > 0){\r\n      setSelectedCell(cell);\r\n    }\r\n  }\r\n\r\n  const rows = Array<Array<Cell>>();\r\n  let row = Array<Cell>();\r\n\r\n  board.cells.map(c => {\r\n    row.push(c);\r\n    if(c.coordinate.horizontal == BoardHorizontalCoordinates.H){\r\n      rows.push(row);\r\n      row = Array<Cell>();\r\n    }\r\n  });\r\n  rows.reverse();\r\n\r\n  let i = 0;\r\n  return (\r\n    <div>\r\n      <h3>Текущий игрок {awaitableMove}</h3>\r\n      <div className=\"board\">\r\n        { rows.map((row, index) =>\r\n          <React.Fragment key={index}>\r\n            {row.map(cell =>\r\n              <CellComponent\r\n                click={click}\r\n                checkerClick={checkerClick}\r\n                cell={cell}\r\n                key={i++}\r\n                selected={cell.coordinate === selectedCell?.coordinate}\r\n              />\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardComponent;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ServiceApi from \"../../serviceApi/serviceApi\";\r\nimport { GameGetInfoResult, GamePlayer, GameStartResult, GameState, MoveResult, MoveVector, Board } from \"../../serviceApi/models/models\";\r\nimport BoardComponent from \"../BoardComponent\";\r\nimport { isGetAccessor } from \"typescript\";\r\nimport delay from \"delay\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Game(props: { \r\n                        skipJoinGameLink: boolean, \r\n                        api: {\r\n                                startGameEndpoint: (firstPlayerCode: string) => Promise<GameStartResult>\r\n                                moveEndpoint: (playerCode: string, previousBoardStateId: string, move: MoveVector) => Promise<MoveResult>\r\n                             }\r\n                      }) {\r\n    const { skipJoinGameLink, api } = props;\r\n    const { id } = useParams();\r\n    const [ gameInfo, setGameInfo ] = useState<GameGetInfoResult | null>(null);\r\n    const gameState = gameInfo?.state;\r\n    const playerCode = localStorage.getItem(\"gameId\" + id)\r\n    const role = localStorage.getItem(\"role\" + id) as GamePlayer;\r\n\r\n    if(playerCode === null)\r\n      throw new Error(\"player code not found\");\r\n\r\n    if(gameState == GameState.Running && gameInfo?.boardState.board === undefined)\r\n      throw new Error(\"board is null\");\r\n\r\n    useEffect(() => {\r\n      if(id === undefined)\r\n        return;\r\n      const getData = async () => {\r\n        if(gameState == GameState.SecondPlayerReadyToPlay && role == GamePlayer.FirstPlayer){\r\n          const startGameResult = await api.startGameEndpoint(playerCode)\r\n\r\n          if(!startGameResult.success)\r\n            throw new Error(startGameResult.message);\r\n\r\n          if(startGameResult.awaitableMove == null)\r\n            throw new Error(\"awaitable move unknown\");\r\n          \r\n          if(startGameResult.boardState == null)\r\n            throw new Error(\"boardState is null\");\r\n          \r\n          setGameInfo({\r\n            success: startGameResult.success,\r\n            message: startGameResult.message,\r\n            awaitableMove: startGameResult.awaitableMove,\r\n            boardState: startGameResult.boardState,\r\n            state: GameState.Running\r\n          });\r\n\r\n          return;\r\n        }\r\n\r\n        if(gameInfo?.awaitableMove === role){\r\n          return;\r\n        }\r\n\r\n        if(gameState === GameState.Finished)\r\n          return;\r\n\r\n        const newGameInfo = await ServiceApi.GetInfo(id);\r\n        setGameInfo(newGameInfo);\r\n\r\n        await delay(300)\r\n      }\r\n\r\n      getData().catch(console.error);\r\n    });\r\n\r\n    const move = async (vector: MoveVector) => {\r\n      try{\r\n        const moveResult = await api.moveEndpoint(playerCode, gameInfo?.boardState.id as string, vector);\r\n        if(!moveResult.success){\r\n          throw new Error(\"move result is not success\");\r\n        }\r\n\r\n        setGameInfo({\r\n          success: moveResult.success,\r\n          message: moveResult.message,\r\n          awaitableMove: moveResult.awaitableMove,\r\n          boardState: moveResult.newBoardState,\r\n          state: GameState.Running\r\n        })\r\n      }\r\n      catch(error){\r\n        console.log(error)\r\n      }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n          { \r\n            gameState === undefined && <>Getting info about game</> \r\n            || gameState === GameState.Created && role === GamePlayer.FirstPlayer && skipJoinGameLink && <>Wait for opponent registration</> \r\n            || gameState === GameState.Created && role === GamePlayer.FirstPlayer && !skipJoinGameLink && <>Send this link to your opponent: { document.location.origin }/#/joinGame/{ id } and wait for his/her registration</>\r\n            || gameState === GameState.Created && role === GamePlayer.SecondPlayer && <button>Register in game</button>\r\n            || gameState === GameState.AllPlayersRegistred && role === GamePlayer.FirstPlayer && <>Opponent has registred, waiting for opponent will be ready to play</> \r\n            || gameState === GameState.AllPlayersRegistred && role === GamePlayer.SecondPlayer && <button>I'm ready to play</button>\r\n            || gameState === GameState.SecondPlayerReadyToPlay && role === GamePlayer.FirstPlayer && <>Opponent is ready to play. Starting the game...</>\r\n            || gameState === GameState.SecondPlayerReadyToPlay && role === GamePlayer.SecondPlayer && <>Waiting for start of the game by game creator</>\r\n            || gameState === GameState.Running && <BoardComponent \r\n                                                      board={gameInfo?.boardState?.board as Board} \r\n                                                      awaitableMove={gameInfo?.awaitableMove as GamePlayer}\r\n                                                      role={role} \r\n                                                      makeMove={move}/>\r\n            || gameState === GameState.Finished && <>Game over. {gameInfo?.winner == role? \"You won\": \"You lose\"} <br/><Link to=\"/\">Menu</Link></>\r\n          }\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default Game;","import \"./App.css\";\r\n\r\nimport {\r\n  HashRouter as Router,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nimport Menu from './components/Menu';\r\nimport CreateGame from \"./components/CreateGame\";\r\nimport JoinGame from \"./components/JoinGame\";\r\nimport Game from \"./components/Game\";\r\nimport ServiceApi from \"./serviceApi/serviceApi\";\r\n\r\nconst createGameWithBotApi = {\r\n  createGameEndpoint: ServiceApi.GameCreateWithBot\r\n};\r\n\r\nconst createGameWithHumanApi = {\r\n  createGameEndpoint: ServiceApi.GameCreateWithHuman\r\n};\r\n\r\nconst playGameWithBotApi = {\r\n  startGameEndpoint: ServiceApi.GameStartWithBot,\r\n  moveEndpoint: ServiceApi.MoveWithBot\r\n};\r\n\r\nconst playGameWithHumanApi = {\r\n  startGameEndpoint: ServiceApi.GameStartWithHuman,\r\n  moveEndpoint: ServiceApi.MoveWithHuman\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n          <div className=\"app\">\r\n            <Router>\r\n              <Routes>\r\n                  <Route path=\"/\" element={<Menu/>} />\r\n                  <Route path=\"/createGameWithBot\" element={<CreateGame api={createGameWithBotApi} skipJoinGameLink={true}/>} />\r\n                  <Route path=\"/createGame\" element={<CreateGame api={createGameWithHumanApi} skipJoinGameLink={false}/>} />\r\n                  <Route path=\"/joinGame/:id\" element={<JoinGame/>} />\r\n                  <Route path=\"/game/:id\" element={<Game skipJoinGameLink={false} api={playGameWithHumanApi}/>}/>\r\n                  <Route path=\"/game/:id/skipJoinGameLink\" element={<Game skipJoinGameLink={true} api={playGameWithBotApi}/>}/>\r\n              </Routes>\r\n            </Router>\r\n          </div>\r\n        );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}